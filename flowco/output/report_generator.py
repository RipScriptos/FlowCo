"""Report generation and formatting."""

import logging
from typing import Dict, Any, Optional
from pathlib import Path
from datetime import datetime
import json
import markdown

from jinja2 import Environment, FileSystemLoader, Template
from weasyprint import HTML, CSS
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors

from ..models.business import BusinessConcept
from ..models.evaluation import EvaluationResult
from ..core.config import config

logger = logging.getLogger(__name__)


class ReportGenerator:
    """Generates evaluation reports in various formats."""
    
    def __init__(self):
        """Initialize report generator."""
        self.templates_dir = Path(__file__).parent.parent.parent / "templates"
        self.templates_dir.mkdir(exist_ok=True)
        
        # Initialize Jinja2 environment
        self.jinja_env = Environment(
            loader=FileSystemLoader(str(self.templates_dir)),
            autoescape=True
        )
        
        # Create default templates if they don't exist
        self._create_default_templates()
    
    def _create_default_templates(self):
        """Create default report templates."""
        
        # Markdown template
        markdown_template = """# Business Evaluation Report

**Generated on:** {{ evaluation_date }}
**Business Concept:** {{ concept_description }}

## Executive Summary

{{ executive_summary }}

## Evaluation Scores

- **Overall Success Score:** {{ overall_success_score }}/100
- **Market Demand Score:** {{ market_demand_score }}/100
- **Concept Viability Score:** {{ concept_viability_score }}/100
- **Execution Difficulty Score:** {{ execution_difficulty_score }}/100

## Market Analysis

### Target Demographics
- **Age Range:** {{ demographics.age_min }}-{{ demographics.age_max }}
- **Income Level:** {{ demographics.income_range }}
- **Location:** {{ demographics.location }}
- **Interests:** {{ demographics.interests | join(', ') }}

### Market Insights
- **Market Size:** {{ market_insights.market_size }}
- **Competition Level:** {{ market_insights.competition_level | title }}
- **Demographic Fit Score:** {{ market_insights.demographic_fit_score }}/100
- **Location Demand Score:** {{ market_insights.location_demand_score }}/100

### Market Trends
{% for trend in market_insights.market_trends %}
- {{ trend }}
{% endfor %}

## Competitive Analysis

### Direct Competitors
{% for competitor in competitive_analysis.direct_competitors %}
- {{ competitor }}
{% endfor %}

### Competitive Advantages
{% for advantage in competitive_analysis.competitive_advantages %}
- {{ advantage }}
{% endfor %}

### Market Gaps
{% for gap in competitive_analysis.market_gaps %}
- {{ gap }}
{% endfor %}

## Branding Recommendations

### Brand Positioning
{{ branding_recommendations.brand_positioning }}

### Key Messaging
{% for message in branding_recommendations.key_messaging %}
- {{ message }}
{% endfor %}

### Marketing Channels
{% for channel in branding_recommendations.marketing_channels %}
- {{ channel }}
{% endfor %}

### Content Strategy
{{ branding_recommendations.content_strategy }}

## Risk Assessment

### High Priority Risks
{% for risk in risk_assessment.high_risks %}
- {{ risk }}
{% endfor %}

### Medium Priority Risks
{% for risk in risk_assessment.medium_risks %}
- {{ risk }}
{% endfor %}

### Success Factors
{% for factor in risk_assessment.success_factors %}
- {{ factor }}
{% endfor %}

## Key Recommendations

{% for recommendation in key_recommendations %}
{{ loop.index }}. {{ recommendation }}
{% endfor %}

## Next Steps

{% for step in next_steps %}
{{ loop.index }}. {{ step }}
{% endfor %}

## Financial Projections

### Startup Costs
{{ financial_projections.startup_costs }}

### Revenue Projections
{% for year, revenue in financial_projections.revenue_projections.items() %}
- **{{ year }}:** {{ revenue }}
{% endfor %}

### Break-even Timeline
{{ financial_projections.break_even_timeline }}

---

*Report generated by FlowCo AI Business Evaluation System*
*Confidence Level: {{ confidence_level }}/100*
"""
        
        # HTML template
        html_template = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Evaluation Report</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        .score-card {
            background: #f8f9fa;
            border-left: 4px solid #007bff;
            padding: 20px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .score {
            font-size: 2em;
            font-weight: bold;
            color: #007bff;
        }
        .section {
            margin: 30px 0;
        }
        .section h2 {
            color: #495057;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 10px;
        }
        .risk-high { color: #dc3545; }
        .risk-medium { color: #ffc107; }
        .risk-low { color: #28a745; }
        .recommendation {
            background: #e7f3ff;
            border-left: 4px solid #007bff;
            padding: 15px;
            margin: 10px 0;
        }
        .footer {
            text-align: center;
            color: #6c757d;
            margin-top: 50px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Business Evaluation Report</h1>
        <p><strong>Business Concept:</strong> {{ concept_description }}</p>
        <p><strong>Generated:</strong> {{ evaluation_date }}</p>
    </div>

    <div class="section">
        <h2>Executive Summary</h2>
        <p>{{ executive_summary }}</p>
    </div>

    <div class="section">
        <h2>Evaluation Scores</h2>
        <div class="score-card">
            <div class="score">{{ overall_success_score }}/100</div>
            <strong>Overall Success Score</strong>
        </div>
        <div style="display: flex; gap: 20px; flex-wrap: wrap;">
            <div class="score-card" style="flex: 1; min-width: 200px;">
                <div class="score">{{ market_demand_score }}/100</div>
                <strong>Market Demand</strong>
            </div>
            <div class="score-card" style="flex: 1; min-width: 200px;">
                <div class="score">{{ concept_viability_score }}/100</div>
                <strong>Concept Viability</strong>
            </div>
            <div class="score-card" style="flex: 1; min-width: 200px;">
                <div class="score">{{ execution_difficulty_score }}/100</div>
                <strong>Execution Difficulty</strong>
            </div>
        </div>
    </div>

    <div class="section">
        <h2>Market Analysis</h2>
        <h3>Target Demographics</h3>
        <ul>
            <li><strong>Age Range:</strong> {{ demographics.age_min }}-{{ demographics.age_max }}</li>
            <li><strong>Income Level:</strong> {{ demographics.income_range }}</li>
            <li><strong>Location:</strong> {{ demographics.location }}</li>
            <li><strong>Interests:</strong> {{ demographics.interests | join(', ') }}</li>
        </ul>
        
        <h3>Market Insights</h3>
        <ul>
            <li><strong>Market Size:</strong> {{ market_insights.market_size }}</li>
            <li><strong>Competition Level:</strong> {{ market_insights.competition_level | title }}</li>
            <li><strong>Demographic Fit:</strong> {{ market_insights.demographic_fit_score }}/100</li>
            <li><strong>Location Demand:</strong> {{ market_insights.location_demand_score }}/100</li>
        </ul>
    </div>

    <div class="section">
        <h2>Key Recommendations</h2>
        {% for recommendation in key_recommendations %}
        <div class="recommendation">
            <strong>{{ loop.index }}.</strong> {{ recommendation }}
        </div>
        {% endfor %}
    </div>

    <div class="footer">
        <p><em>Report generated by FlowCo AI Business Evaluation System</em></p>
        <p><em>Confidence Level: {{ confidence_level }}/100</em></p>
    </div>
</body>
</html>"""
        
        # Save templates
        (self.templates_dir / "report_markdown.md").write_text(markdown_template)
        (self.templates_dir / "report_html.html").write_text(html_template)
    
    async def generate_report(
        self, 
        concept: BusinessConcept, 
        evaluation: EvaluationResult,
        format: str = "markdown",
        output_path: Optional[str] = None
    ) -> str:
        """
        Generate evaluation report in specified format.
        
        Args:
            concept: Business concept
            evaluation: Evaluation results
            format: Output format (markdown, html, pdf)
            output_path: Optional output file path
            
        Returns:
            Generated report content or file path
        """
        logger.info(f"Generating {format} report")
        
        try:
            # Prepare template context
            context = self._prepare_template_context(concept, evaluation)
            
            if format.lower() == "markdown":
                return await self._generate_markdown_report(context, output_path)
            elif format.lower() == "html":
                return await self._generate_html_report(context, output_path)
            elif format.lower() == "pdf":
                return await self._generate_pdf_report(context, output_path)
            elif format.lower() == "json":
                return await self._generate_json_report(concept, evaluation, output_path)
            else:
                raise ValueError(f"Unsupported format: {format}")
                
        except Exception as e:
            logger.error(f"Error generating {format} report: {str(e)}")
            raise
    
    def _prepare_template_context(self, concept: BusinessConcept, evaluation: EvaluationResult) -> Dict[str, Any]:
        """Prepare template context from concept and evaluation data."""
        
        return {
            # Basic info
            "concept_description": concept.concept_description,
            "evaluation_date": evaluation.evaluation_date.strftime("%Y-%m-%d %H:%M:%S"),
            
            # Demographics
            "demographics": {
                "age_min": concept.target_demographics.age_min,
                "age_max": concept.target_demographics.age_max,
                "income_range": concept.target_demographics.income_range,
                "location": concept.target_demographics.location,
                "interests": concept.target_demographics.interests or []
            },
            
            # Scores
            "overall_success_score": evaluation.overall_success_score,
            "market_demand_score": evaluation.market_demand_score,
            "concept_viability_score": evaluation.concept_viability_score,
            "execution_difficulty_score": evaluation.execution_difficulty_score,
            "confidence_level": evaluation.confidence_level,
            
            # Analysis results
            "executive_summary": evaluation.executive_summary,
            "market_insights": evaluation.market_insights,
            "competitive_analysis": evaluation.competitive_analysis,
            "branding_recommendations": evaluation.branding_recommendations,
            "financial_projections": evaluation.financial_projections,
            "risk_assessment": evaluation.risk_assessment,
            "key_recommendations": evaluation.key_recommendations,
            "next_steps": evaluation.next_steps
        }
    
    async def _generate_markdown_report(self, context: Dict[str, Any], output_path: Optional[str]) -> str:
        """Generate markdown report."""
        
        template = self.jinja_env.get_template("report_markdown.md")
        content = template.render(**context)
        
        if output_path:
            Path(output_path).write_text(content, encoding='utf-8')
            return output_path
        
        return content
    
    async def _generate_html_report(self, context: Dict[str, Any], output_path: Optional[str]) -> str:
        """Generate HTML report."""
        
        template = self.jinja_env.get_template("report_html.html")
        content = template.render(**context)
        
        if output_path:
            Path(output_path).write_text(content, encoding='utf-8')
            return output_path
        
        return content
    
    async def _generate_pdf_report(self, context: Dict[str, Any], output_path: Optional[str]) -> str:
        """Generate PDF report."""
        
        # First generate HTML
        html_content = await self._generate_html_report(context, None)
        
        # Convert HTML to PDF
        if not output_path:
            output_path = f"business_evaluation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        try:
            # Use WeasyPrint for HTML to PDF conversion
            HTML(string=html_content).write_pdf(output_path)
        except Exception as e:
            logger.warning(f"WeasyPrint failed, trying ReportLab: {str(e)}")
            # Fallback to ReportLab
            await self._generate_pdf_with_reportlab(context, output_path)
        
        return output_path
    
    async def _generate_pdf_with_reportlab(self, context: Dict[str, Any], output_path: str):
        """Generate PDF using ReportLab as fallback."""
        
        doc = SimpleDocTemplate(output_path, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        # Title
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.darkblue
        )
        story.append(Paragraph("Business Evaluation Report", title_style))
        story.append(Spacer(1, 12))
        
        # Business concept
        story.append(Paragraph(f"<b>Business Concept:</b> {context['concept_description']}", styles['Normal']))
        story.append(Paragraph(f"<b>Generated:</b> {context['evaluation_date']}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Executive Summary
        story.append(Paragraph("Executive Summary", styles['Heading2']))
        story.append(Paragraph(context['executive_summary'], styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Scores table
        story.append(Paragraph("Evaluation Scores", styles['Heading2']))
        score_data = [
            ['Metric', 'Score'],
            ['Overall Success', f"{context['overall_success_score']}/100"],
            ['Market Demand', f"{context['market_demand_score']}/100"],
            ['Concept Viability', f"{context['concept_viability_score']}/100"],
            ['Execution Difficulty', f"{context['execution_difficulty_score']}/100"]
        ]
        
        score_table = Table(score_data)
        score_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(score_table)
        story.append(Spacer(1, 20))
        
        # Key Recommendations
        story.append(Paragraph("Key Recommendations", styles['Heading2']))
        for i, rec in enumerate(context['key_recommendations'], 1):
            story.append(Paragraph(f"{i}. {rec}", styles['Normal']))
        
        doc.build(story)
    
    async def _generate_json_report(
        self, 
        concept: BusinessConcept, 
        evaluation: EvaluationResult, 
        output_path: Optional[str]
    ) -> str:
        """Generate JSON report."""
        
        # Convert to dictionary
        report_data = {
            "business_concept": concept.dict(),
            "evaluation_result": evaluation.dict(),
            "generated_at": datetime.now().isoformat(),
            "report_version": "1.0"
        }
        
        # Serialize to JSON
        json_content = json.dumps(report_data, indent=2, default=str)
        
        if output_path:
            Path(output_path).write_text(json_content, encoding='utf-8')
            return output_path
        
        return json_content
    
    async def generate_summary_report(
        self, 
        concept: BusinessConcept, 
        evaluation: EvaluationResult
    ) -> Dict[str, Any]:
        """Generate a summary report for quick viewing."""
        
        return {
            "business_concept": concept.concept_description,
            "overall_score": evaluation.overall_success_score,
            "key_scores": {
                "market_demand": evaluation.market_demand_score,
                "viability": evaluation.concept_viability_score,
                "execution_difficulty": evaluation.execution_difficulty_score
            },
            "top_recommendations": evaluation.key_recommendations[:3],
            "market_size": evaluation.market_insights.market_size,
            "competition_level": evaluation.market_insights.competition_level,
            "confidence": evaluation.confidence_level,
            "generated_at": evaluation.evaluation_date.isoformat()
        }